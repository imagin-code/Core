<i:SingleApplication x:Class="Imagin.Apps.Paint.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:i="http://imagin.tech/imagin/wpf"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Apps.Paint"
    xmlns:Common="clr-namespace:Imagin.Common;assembly=Imagin.Common"
    xmlns:Effects="clr-namespace:Imagin.Apps.Paint.Effects"
    xmlns:Media="clr-namespace:System.Windows.Media;assembly=PresentationCore">
    <i:SingleApplication.Resources>
        <!-- ... Splash -->
        <Style x:Key="{x:Static i:BaseApplication.SplashWindowStyleKey}" TargetType="{x:Type i:SplashWindow}" BasedOn="{StaticResource {x:Type i:SplashWindow}}">
            <Setter Property="Accent" Value="#2380d7"/>
            <Setter Property="Image" Value="{i:ProjectImage Splash.png}"/>
        </Style>
        
        <!-- ... Windows -->

        <Style x:Key="{x:Type local:MainWindow}" TargetType="{x:Type local:MainWindow}" BasedOn="{StaticResource {x:Type i:MainWindow}}"/>

        <Style x:Key="{x:Type local:NewWindow}" TargetType="{x:Type local:NewWindow}" BasedOn="{StaticResource {x:Type Window}}"/>

        <!-- ... Controls -->

        <Style x:Key="{x:Type local:BrushView}" TargetType="{x:Type local:BrushView}" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:BrushView}">
                        <i:ImageElement
                            Foreground="{TemplateBinding PreviewColor}"
                            Source="{TemplateBinding Preview}"
                            SourceSize="{TemplateBinding PreviewSize}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type local:GroupControl}" TargetType="{x:Type local:GroupControl}" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:GroupControl}">
                        <Grid>
                            <Grid.Resources>
                                <i:Reference x:Key="Panel" 
                                    Data="{i:TemplatedParent Panel}"/>
                                <i:Reference x:Key="Source" 
                                    Data="{i:TemplatedParent}"/>

                                <ContextMenu x:Key="ItemContextMenu" DataContext="{i:Self PlacementTarget.DataContext}">
                                    <MenuItem Header="{i:Loc Clone}"
                                        Command="{Binding Data.CloneCommand, Source={StaticResource Panel}}"
                                        CommandParameter="{Binding}"/>
                                    <MenuItem Header="{i:Loc Delete}"
                                        Command="{Binding Data.DeleteCommand, Source={StaticResource Panel}}"
                                        CommandParameter="{Binding}"/>
                                    <MenuItem Header="{i:Loc Reset}"
                                        Command="{Binding Data.ResetCommand, Source={StaticResource Panel}}"
                                        CommandParameter="{Binding}"/>
                                    <Separator/>
                                    <MenuItem Header="{i:Loc Export, Suffix=...}"
                                        Command="{Binding Data.Source.ExportCommand, Source={StaticResource Source}}"
                                        CommandParameter="{Binding}"/>
                                    <MenuItem Header="{i:Loc ExportAll, Suffix=...}"
                                        Command="{Binding Data.Source.ExportAllCommand, Source={StaticResource Source}}"/>
                                    <Separator/>
                                    <MenuItem Header="{i:Loc Import, Suffix=...}"
                                        Command="{Binding Data.Source.ImportCommand, Source={StaticResource Source}}"/>
                                </ContextMenu>
                            </Grid.Resources>
                            <ListBox ItemsSource="{TemplateBinding SelectedGroup}"
                                BorderThickness="0"
                                Margin="5"
                                Padding="0"
                                ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                                ScrollViewer.VerticalScrollBarVisibility="Visible"
                                SelectedIndex="{i:TemplatedParent SelectedIndex, Mode=TwoWay}">
                                <ListBox.Style>
                                    <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Data.View, Source={StaticResource Source}}" Value="Grid">
                                                <Setter Property="ItemContainerStyle">
                                                    <Setter.Value>
                                                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                                            <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
                                                            <Setter Property="Height" Value="{Binding Data.PreviewSize, Source={StaticResource Panel}}"/>
                                                            <Setter Property="Width" Value="{Binding Data.PreviewSize, Source={StaticResource Panel}}"/>
                                                        </Style>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <WrapPanel MaxWidth="{i:Ancestor ActualWidth, ListBox}" Orientation="Horizontal"/>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="*,Auto">
                                                                <ContentPresenter Content="{Binding}" 
                                                                    ContentTemplate="{Binding Data.ItemTemplate, Source={StaticResource Source}}"/>
                                                                <TextBlock Text="{Binding Name}"
                                                                    HorizontalAlignment="Center"
                                                                    Margin="0,5,0,0"
                                                                    TextTrimming="CharacterEllipsis">
                                                                    <TextBlock.Visibility>
                                                                        <MultiBinding Converter="{x:Static i:BooleanToVisibilityMultiConverter.Default}">
                                                                            <i:IsBinding Type="{x:Type Common:IName}"/>
                                                                        </MultiBinding>
                                                                    </TextBlock.Visibility>
                                                                </TextBlock>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Data.View, Source={StaticResource Source}}" Value="List">
                                                <Setter Property="ItemContainerStyle">
                                                    <Setter.Value>
                                                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                                            <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
                                                            <Setter Property="Height" Value="{Binding Data.PreviewSize, Source={StaticResource Panel}}"/>
                                                        </Style>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel/>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="*,Auto">
                                                                <ContentPresenter Content="{Binding}" 
                                                                    ContentTemplate="{Binding Data.ItemTemplate, Source={StaticResource Source}}"/>
                                                                <TextBlock Text="{Binding Name}"
                                                                    HorizontalAlignment="Left"
                                                                    Margin="0,5,0,0"
                                                                    TextTrimming="CharacterEllipsis"
                                                                    VerticalAlignment="Center">
                                                                    <TextBlock.Visibility>
                                                                        <MultiBinding Converter="{x:Static i:BooleanToVisibilityMultiConverter.Default}">
                                                                            <i:IsBinding Type="{x:Type Common:IName}"/>
                                                                        </MultiBinding>
                                                                    </TextBlock.Visibility>
                                                                </TextBlock>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.Style>
                            </ListBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="View" Value="One">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type local:GroupControl}">
                                <Grid>
                                    <Grid.Resources>
                                        <i:Reference x:Key="Panel" 
                                            Data="{i:TemplatedParent}"/>
                                        <i:Reference x:Key="Source" 
                                            Data="{i:TemplatedParent}"/>
                                    </Grid.Resources>
                                    <i:CarouselControl
                                        Columns="1"
                                        ItemsSource="{TemplateBinding SelectedGroup}"
                                        ItemTemplate="{TemplateBinding ItemTemplate}"
                                        Margin="10,5"
                                        SelectedIndex="{i:TemplatedParent SelectedIndex, Mode=TwoWay}"
                                        SortDirection="Ascending"
                                        SortName="Name"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ... -->

        <Style x:Key="{x:Type local:LayerArranger}" TargetType="{x:Type local:LayerArranger}" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:LayerArranger}">
                        <ContentPresenter Content="{TemplateBinding Layout}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type local:LayerView}" TargetType="{x:Type local:LayerView}" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:LayerView}">
                        <Border x:Name="Border">
                            <Border.Effect>
                                <Effects:ChannelsEffect
                                    Red="{i:TemplatedParent Layer.Style.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Red}}"
                                    Green="{i:TemplatedParent Layer.Style.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Green}}"
                                    Blue="{i:TemplatedParent Layer.Style.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Blue}}"/>
                            </Border.Effect>
                            <Border Effects:EffectExtensions.Effects="{i:TemplatedParent Layer.Style.Effects}">
                                <Image x:Name="Image" Source="{i:TemplatedParent Layer.Pixels}"
                                    Opacity="{i:TemplatedParent Layer.Style.Fill}"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                                    Visibility="{i:VisibilityBinding Layer.IsVisible}"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{i:Self Layer.IsVisible}" Value="True">
                                <Setter TargetName="Border" Property="Opacity" Value="{i:TemplatedParent Layer.Style.Opacity}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{i:Self Layer.IsVisible}" Value="False">
                                <Setter TargetName="Border" Property="Opacity" Value="0"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type local:LayerStyleView}" TargetType="{x:Type local:LayerStyleView}" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:LayerStyleView}">
                        <Border Opacity="{i:TemplatedParent LayerStyle.Opacity}">
                            <Border.Effect>
                                <Effects:ChannelsEffect
                                    Red="{i:TemplatedParent LayerStyle.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Red}}"
                                    Green="{i:TemplatedParent LayerStyle.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Green}}"
                                    Blue="{i:TemplatedParent LayerStyle.Channels, Converter={x:Static i:EnumFlagsToBooleanConverter.Default}, ConverterParameter={x:Static i:RedGreenBlue.Blue}}"/>
                            </Border.Effect>
                            <Border Effects:EffectExtensions.Effects="{i:TemplatedParent LayerStyle.Effects}">
                                <Image Source="{i:TemplatedParent Image}"
                                    Opacity="{i:TemplatedParent LayerStyle.Fill}"
                                    RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                            </Border>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ... -->

        <Style x:Key="{x:Type local:ToolButton}" TargetType="{x:Type local:ToolButton}">
            <Setter Property="Background" Value="{i:ThemeKey ActualKey=ImageButtonBackground}"/>
            <Setter Property="BorderBrush" Value="{i:ThemeKey ActualKey=ImageButtonBorder}"/>
            <Setter Property="Border.CornerRadius" Value="0"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Cursor" Value="Arrow" />
            <Setter Property="Foreground" Value="{i:ThemeKey ActualKey=ImageButtonForeground}"/>
            <Setter Property="Padding" Value="3" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:ToolButton">
                        <Grid>
                            <Grid.Resources>
                                <i:Reference x:Key="ToolButton" Data="{i:TemplatedParent}"/>
                            </Grid.Resources>
                            <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}">
                                <Grid>
                                    <ContentPresenter
                                        Content="{TemplateBinding SelectedItem}"
                                        ContentTemplate="{TemplateBinding SelectedItemTemplate}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Margin="{TemplateBinding Padding}"/>
                                    <i:ImageElement
                                        HorizontalAlignment="Right"
                                        Source="{i:ProjectImage RightTriangle.png}"
                                        SourceSize="6,6"
                                        VerticalAlignment="Bottom"
                                        Visibility="{TemplateBinding ArrowVisibility}"/>
                                </Grid>
                            </Border>
                            <Popup x:Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False" 
                                IsOpen="{i:TemplatedParent IsMenuVisible, Mode=TwoWay}"
                                i:XPopup.CloseOnMouseLeave="True"
                                Placement="Bottom"
                                PlacementTarget="{Binding ElementName=Border}"
                                PopupAnimation="Fade">
                                <i:PopupBorder>
                                    <i:MenuItemControl x:Name="MenuItemControl"
                                        ItemsSource="{TemplateBinding ItemsSource}"
                                        ItemTemplate="{TemplateBinding ItemTemplate}"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="True">
                                        <i:MenuItemControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel/>
                                            </ItemsPanelTemplate>
                                        </i:MenuItemControl.ItemsPanel>
                                        <i:MenuItemControl.ItemContainerStyle>
                                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="Command" Value="{Binding Data.SelectCommand, Source={StaticResource ToolButton}}"/>
                                                <Setter Property="CommandParameter" Value="{Binding}"/>
                                                <Setter Property="Icon" Value="{Binding Icon}"/>
                                                <Setter Property="IsCheckable" Value="True"/>
                                                <Setter Property="i:XMenuItem.GroupName" Value="Tool"/>
                                                <Setter Property="i:XMenuItem.SelectionMode" Value="Single"/>
                                            </Style>
                                        </i:MenuItemControl.ItemContainerStyle>
                                    </i:MenuItemControl>
                                </i:PopupBorder>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="True"/>
                        <Condition Property="IsMenuVisible" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" 
                        Value="{i:ThemeKey ActualKey=Accent}"/>
                    <Setter Property="i:ImageElement.Foreground" 
                        Value="{i:ThemeKey ActualKey=Accent}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="False"/>
                        <Condition Property="IsMenuVisible" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" 
                        Value="{i:ThemeKey ActualKey=ImageButtonMouseOverBackground}"/>
                    <Setter Property="BorderBrush" 
                        Value="{i:ThemeKey ActualKey=ImageButtonMouseOverBorder}"/>
                    <Setter Property="Foreground" 
                        Value="{i:ThemeKey ActualKey=ImageButtonMouseOverForeground}"/>
                    <Setter Property="i:ImageElement.Foreground" 
                        Value="{i:ThemeKey ActualKey=ImageButtonMouseOverForeground}"/>
                </MultiTrigger>
                <Trigger Property="IsMenuVisible" Value="True">
                    <Setter Property="Background" 
                        Value="{i:ThemeKey ActualKey=ImageButtonCheckedBackground}"/>
                    <Setter Property="BorderBrush" 
                        Value="{i:ThemeKey ActualKey=ImageButtonCheckedBorder}"/>
                    <Setter Property="Foreground" 
                        Value="{i:ThemeKey ActualKey=ImageButtonCheckedForeground}"/>
                    <Setter Property="i:ImageElement.Foreground" 
                        Value="{i:ThemeKey ActualKey=ImageButtonCheckedForeground}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ... -->

        <Style x:Key="{x:Type local:Viewer}" TargetType="{x:Type local:Viewer}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:Viewer}">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Border.ContextMenu>
                                <ContextMenu>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        CommandParameter="{x:Static Media:Colors.White}"
                                        Header="White"/>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Lighter gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="230" G="230" B="230"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Light gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="210" G="210" B="210"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Medium light gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="180" G="180" B="180"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="150" G="150" B="150"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Medium dark gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="120" G="120" B="120"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Dark gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="90" G="90" B="90"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Darker gray">
                                        <MenuItem.CommandParameter>
                                            <Media:Color A="255" R="60" G="60" B="60"/>
                                        </MenuItem.CommandParameter>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        CommandParameter="{x:Static Media:Colors.Black}"
                                        Header="Black"/>
                                    <Separator/>
                                    <MenuItem
                                        Command="{i:TemplatedParent BackgroundColorCommand}"
                                        Header="Custom..."/>
                                </ContextMenu>
                            </Border.ContextMenu>
                            <Grid i:XGrid.Columns="Auto,*"
                                i:XGrid.Rows="Auto,*"
                                DataContext="{Binding ElementName=PART_ImageViewer}">
                                <!-- ... Rulers -->
                                <i:Ruler
                                    Grid.Row="0"
                                    Grid.Column="1"
                                    x:Name="PART_HorizontalRuler"
                                    AutoSize="True"
                                    Background="Transparent" 
                                    BorderBrush="Transparent" 
                                    ChipColor="#FFF"  
                                    Foreground="#FFF" 
                                    Height="{TemplateBinding RulerLength}" 
                                    HorizontalAlignment="Stretch" 
                                    Resolution="{TemplateBinding Resolution}"
                                    SmallStep="10" 
                                    Step="50"
                                    TickPlacement="Top" 
                                    TickStroke="#FFF" 
                                    Unit="{TemplateBinding Unit}"
                                    VerticalAlignment="Top" 
                                    Visibility="{TemplateBinding RulerVisibility}"
                                    Zoom="{TemplateBinding Zoom}"/>
                                <i:Ruler
                                    Grid.Row="1" 
                                    Grid.Column="0"
                                    x:Name="PART_VerticalRuler"
                                    AutoSize="True"
                                    Background="Transparent" 
                                    BorderBrush="Transparent" 
                                    ChipColor="#FFF"  
                                    Foreground="#FFF" 
                                    Height="{TemplateBinding RulerLength}" 
                                    HorizontalAlignment="Left" 
                                    Resolution="{TemplateBinding Resolution}"
                                    SmallStep="10" 
                                    Step="50" 
                                    TickPlacement="Bottom" 
                                    TickStroke="#FFF" 
                                    Unit="{TemplateBinding Unit}"
                                    VerticalAlignment="Stretch" 
                                    Visibility="{TemplateBinding RulerVisibility}"
                                    Zoom="{TemplateBinding Zoom}">
                                    <i:Ruler.LayoutTransform>
                                        <RotateTransform Angle="90" />
                                    </i:Ruler.LayoutTransform>
                                </i:Ruler>

                                <!-- ... Content -->
                                <ScrollViewer 
                                    x:Name="PART_ScrollViewer"
                                    Grid.Column="1"
                                    Grid.Row="1"
                                    HorizontalScrollBarVisibility="Auto">
                                    <Grid
                                        Height="Auto"
                                        HorizontalAlignment="Center"
                                        RenderTransformOrigin="0.5,0.5"
                                        VerticalAlignment="Center"
                                        Width="Auto">
                                        <Grid.LayoutTransform >
                                            <RotateTransform Angle="{i:TemplatedParent CanvasAngle}"/>
                                        </Grid.LayoutTransform>
                                        <Border
                                            Background="{x:Static i:CheckerBrush.Default}"
                                            BorderBrush="Black"
                                            BorderThickness="1">
                                            <Border.Effect>
                                                <DropShadowEffect Color="#55000000" Opacity="0.35" BlurRadius="10" ShadowDepth="4"/>
                                            </Border.Effect>
                                        </Border>
                                        <ContentPresenter x:Name="PART_Content"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                                    </Grid>
                                </ScrollViewer>

                                <!-- ... Compass -->
                                <Grid
                                    Grid.ColumnSpan="2"
                                    Grid.RowSpan="2"
                                    IsHitTestVisible="False"
                                    Visibility="{TemplateBinding CompassVisibility}">
                                    <Image
                                        Height="250"
                                        HorizontalAlignment="Center"
                                        Opacity="0.9"
                                        Source="{i:ProjectImage CompassBackground.png}"
                                        VerticalAlignment="Center"
                                        Width="230">
                                    </Image>
                                    <Image
                                        Height="250"
                                        HorizontalAlignment="Center"
                                        Opacity="0.9"
                                        RenderTransformOrigin="0.5,0.5"
                                        Source="{i:ProjectImage CompassForeground.png}"
                                        VerticalAlignment="Center"
                                        Width="230">
                                        <Image.RenderTransform>
                                            <RotateTransform Angle="{i:TemplatedParent CanvasAngle}"/>
                                        </Image.RenderTransform>
                                    </Image>
                                </Grid>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="{x:Type local:ImageViewer}" TargetType="{x:Type local:ImageViewer}" BasedOn="{StaticResource {x:Type local:Viewer}}">
            <Setter Property="Cursor" Value="{i:Self Tool.Cursor}"/>
            <Style.Triggers>
                <DataTrigger Binding="{i:IsBinding Tool, local:BucketTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/BucketCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:CountTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/CountCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:CropTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/CropCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:EyeTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/EyeCursor.png, 0, 18}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:FreePathTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/FreePathCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:HandTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/HandCursor.png, 9, 9}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:HandRotateTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/HandRotateCursor.png, 9, 9}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:MagicWandTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/MagicWandCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:MoveTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/MoveCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:NoteTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/NoteCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:PathTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/PathCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:TransformTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/TransformCursor.png}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:ZoomTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor" Value="{i:ProjectCursor Images/ZoomCursor.png, 5, 5}"/>
                </DataTrigger>
                <!-- ... -->
                <DataTrigger Binding="{i:IsBinding Tool, local:EraserTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static local:BrushToBitmapConverter.Default}">
                                <i:Self Path="Tool.Brush"/>
                                <i:Self Path="Tool.Brush.Size"/>
                                <i:Self Path="Zoom"/>
                                <i:Self Path="Tool.CursorIcon"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{i:IsBinding Tool, local:MagicBrushTool, 
                    Relative=Self}" Value="True">
                    <Setter Property="Cursor">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static local:BrushToBitmapConverter.Default}">
                                <i:Self Path="Tool.Brush"/>
                                <i:Self Path="Tool.Brush.Size"/>
                                <i:Self Path="Zoom"/>
                                <i:Self Path="Tool.CursorIcon"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{i:TypeBinding Tool, 
                    Relative=Self}" Value="{x:Type local:BrushTool}">
                    <Setter Property="Cursor">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static local:BrushToBitmapConverter.Default}">
                                <i:Self Path="Tool.Brush"/>
                                <i:Self Path="Tool.Brush.Size"/>
                                <i:Self Path="Zoom"/>
                                <i:Options Path="ForegroundColor"/>
                                <i:Self Path="Tool.Opacity"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </i:SingleApplication.Resources>
</i:SingleApplication>