//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float Blue;
//   float Cyan;
//   float Green;
//   float HighlightAmount;
//   float HighlightRange;
//   float Magenta;
//   float MidtoneAmount;
//   float MidtoneRange;
//   float Red;
//   float ShadowAmount;
//   float ShadowRange;
//   float Target;
//   float Yellow;
//   sampler2D input;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   Red             c0       1
//   Green           c1       1
//   Blue            c2       1
//   Cyan            c3       1
//   Yellow          c4       1
//   Magenta         c5       1
//   HighlightAmount c6       1
//   HighlightRange  c7       1
//   MidtoneAmount   c8       1
//   MidtoneRange    c9       1
//   ShadowAmount    c10      1
//   ShadowRange     c11      1
//   Target          c12      1
//   input           s0       1
//

    ps_3_0
    def c13, 6, 4, 2, 60
    def c14, 0.00999999978, 0.0166666675, -299.999969, -359.999969
    def c15, 0.5, -1, 2, 0
    def c16, 2, 0.5, -2, -0.5
    def c17, 239.999985, 179.999985, 119.999992, 59.9999962
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0

#line 237 "C:\Users\james\GitHub\Imagin.NET\Apps.Paint\Effects\Image\Color\Saturation.fx"
    texld r0, v0, s0  // ::color<0,1,2,3>

#line 51
    add r1, -r0.yzxx, r0.xyzz

#line 26
    cmp r2.xy, r1.x, r0, r0.yxzw
    max r3.x, r2.x, r0.z  // ::maximum<0>
    min r3.y, r0.z, r2.y  // ::minimum<0>
    add r2.x, -r3.y, r3.x  // ::chroma<0>
    add r2.y, r3.y, r3.x
    mul r3.yzw, r2.y, c15.x  // ::l<0,0,0>

#line 35
    add r2.z, r2.y, c15.y
    rcp r2.w, r2.y
    mul r2.w, r2.w, r2.x
    add r4.x, -r2.y, c15.z
    rcp r4.x, r4.x
    mul r4.x, r2.x, r4.x
    cmp r4.y, r2.z, r4.x, r2.w  // ::s<0>

#line 50
    add r5.xyz, r0.xzyw, -r3.x

#line 41
    rcp r2.w, r2.x

#line 51
    mul r3.x, r1.y, r2.w  // ::h<0>
    mad r6.xyz, r1.yxww, r2.w, c13  // ::h<0,0>

#line 42
    cmp r2.w, r1.y, r3.x, r6.x  // ::h<0>

#line 51
    cmp r3.x, -r5_abs.z, r6.z, c15.w  // ::h<0>
    cmp r3.x, -r5_abs.y, r6.y, r3.x  // ::h<0>
    cmp r2.w, -r5_abs.x, r2.w, r3.x  // ::h<0>
    mul r4.x, r2.w, c13.w  // ::h<0>
    cmp r2.xw, -r2_abs.x, c15.w, r4.xyzy  // ::h<0>, ::s<0>

#line 243
    mov r4.xyw, c15
    if_eq c12.x, r4.w

#line 258
      cmp r1, r1, c15_abs.w, c15_abs.y
      add r5, -r0.zxyx, r0.xyzy
      cmp r5, r5, c15_abs.w, c15_abs.y

#line 250
      mul r3.x, r2.w, c4.x
      mad r3.x, r3.x, c14.x, r2.w  // ::hsb<1>

#line 255
      mul r4.z, r2.w, c5.x
      mad r4.z, r4.z, c14.x, r2.w  // ::hsb<1>

#line 264
      mul r6, r1, r5

#line 260
      mul r1.z, r2.w, c3.x
      mad r1.z, r1.z, c14.x, r2.w  // ::hsb<1>
      cmp r1.z, -r6.x, r2.w, r1.z  // ::hsb<1>
      cmp r1.z, -r6.y, r1.z, r4.z  // ::hsb<1>
      cmp r1.z, -r6.z, r1.z, r3.x  // ::hsb<1>

#line 266
      mul r1.w, r2.w, c0.x
      mad r1.w, r1.w, c14.x, r1.z  // ::hsb<1>

#line 271
      mul r3.x, r2.w, c1.x
      mad r3.x, r3.x, c14.x, r1.z  // ::hsb<1>

#line 274
      mul r1.xy, r1.yxzw, r5.xzzw
      mul r4.z, r2.w, c2.x
      mad r4.z, r4.z, c14.x, r1.z  // ::hsb<1>
      cmp r1.x, -r1.x, r1.z, r4.z  // ::hsb<1>
      cmp r1.x, -r1.y, r1.x, r3.x  // ::hsb<1>
      cmp r1.x, -r6.w, r1.x, r1.w  // ::hsb<1>
    else
      add r1.y, r4.y, c12.x

#line 283
      mad r1.z, r2.y, -r4.x, c11.x
      mad r1.w, r2.w, c10.x, r2.w  // ::hsb<1>

#line 288
      mad r3.x, r2.y, -r4.x, c9.x
      mad r4.y, r2.w, c8.x, r2.w  // ::hsb<1>

#line 293
      mad r2.y, r2.y, -r4.x, c7.x
      mad r4.x, r2.w, c6.x, r2.w  // ::hsb<1>
      cmp r2.y, r2.y, r4.x, r2.w  // ::hsb<1>
      cmp r2.y, r3.x, r4.y, r2.y  // ::hsb<1>
      cmp r1.z, r1.z, r1.w, r2.y  // ::hsb<1>
      cmp r1.x, -r1_abs.y, r1.z, r2.w  // ::hsb<1>
    endif

#line 67
    if_lt -r1.x, c15.w

#line 63
      mul r1.y, r2.x, c14.y  // ::h<0>

#line 69
      add r1.z, -r2_abs.z, -c15.y
      mul r4.x, r1.x, r1.z  // ::chroma<0>
      cmp r1.xz, r2.x, c16.xyyw, c16.zyww
      mul r1.y, r1.z, r1.y
      frc r1.y, r1.y
      mad r1.x, r1.x, r1.y, c15.y
      add r1.x, -r1_abs.x, -c15.y
      mul r4.y, r1.x, r4.x  // ::v<0>

#line 90
      add r1, -r2.x, c17

#line 96
      add r5, r2.x, -c17.wzyx

#line 102
      add r2.y, r2.x, c14.z
      add r2.zw, -r2.x, -c14.xywz

#line 107
      cmp r2.zw, r2, -c15_abs.y, -c15_abs.w
      cmp r2.y, r2.y, r2.z, c15.w
      mov r4.z, c15.w
      cmp r6.xyz, r2.y, c15.w, r4.xzyw  // ::result<0,1,2>
      cmp r2.y, r5.w, r2.w, c15.w
      cmp r2.yzw, r2.y, r6.xxyz, r4.xyzx  // ::result<0,1,2>
      cmp r1, r1, -c15_abs.y, -c15_abs.w
      cmp r1.xyz, r5.zyxw, r1, c15.w
      cmp r2.yzw, r1.x, r2, r4.xzyx  // ::result<0,1,2>
      cmp r2.yzw, r1.y, r2, r4.xzxy  // ::result<0,1,2>
      cmp r1.xyz, r1.z, r2.yzww, r4.yxzw  // ::result<0,1,2>
      cmp r1.w, r2.x, r1.w, c15.w
      cmp r1.xyz, r1.w, r1, r4  // ::result<0,1,2>
      mad r1.w, r4.x, -c15.x, r3.w  // ::w<0>

#line 112
      add r0.xyz, r1.w, r1  // ::result<0,1,2>
    else

#line 117
      mov r0.xyz, r3.yzww  // ::result<0,1,2>
    endif
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 100 instruction slots used (1 texture, 99 arithmetic)
