//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float Component;
//   float Mode;
//   float Model;
//   float X;
//   float Y;
//   float Z;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Model        c0       1
//   Component    c1       1
//   Mode         c2       1
//   X            c3       1
//   Y            c4       1
//   Z            c5       1
//   input        s0       1
//

    ps_3_0
    def c6, -9, -10, -11, -12
    def c7, -15, -16, -17, -18
    def c8, -19, -20, -21, -22
    def c9, 1, 100, 224, 122
    def c10, 0, 95.0455933, 100, 108.905777
    def c11, 100, 359, 128, 255
    def c12, -13, -14, -20, 0.00999999978
    def c13, 0, -134, -140, -0
    def c14, -1, -2, -3, -4
    def c15, 360, 0.00277777785, -360, -0.00277777785
    def c16, 0.0174532942, 1.04719758, 0.159154937, 0.5
    def c17, 0.0174532942, -2.09439516, -4.18879032, 0.166666672
    def c18, 0.00277777785, 0.5, 6.28318548, -3.14159274
    def c19, 0.000381568912, 0.00970537588, 0.00313080009, 0.416666657
    def c20, 1.05499995, -0.0549999997, 12.9200001, 0.0166666675
    def c21, 0.00277777785, 0.333333343, -0.333333343, 0.666666687
    def c22, 0.587000012, 0.298999995, 0.114, 180
    def c23, 0.00999999978, 0.00392156886, 120, 240
    def c24, -180, -240, -300, 0.00494999997
    def c25, 0.00200000009, 0.206896558, -0.137931034, 0.12841855
    def c26, 24, 0.00862068962, -0.137931034, 0.100000001
    def c27, 9.99999029e-005, 0, 0.00862068962, 0.00499999989
    def c28, 0.00278551527, 0.5, 1.09612381, -0.278869003
    def c29, -0.498610765, 0.0415550582, 1.05697155, 0.182745174
    def c30, -0.0153738316, 0.0187596753, -0.00203976943, 0.454369038
    def c31, 0.473533154, -0.00962760858, -0.00569803128, 0.75
    def c32, 0.0334304981, -0.00999771617, 0.000573822472, 0.0720978007
    def c33, 0.00540539389, -0.000450494583, -0.011458532, 1.01532567
    def c34, 13, 0.00110705651, 0.197833031, 0.468330473
    def c35, 1074, -134, 262, -140
    def c36, 0.25, 0.5, 75, 50
    def c37, 359, 0.00278551527, -359, -0.00278551527
    def c38, -300, 0.00277777785, -0.666666687, 1
    def c39, 0, -128, 0.00278551527, 360
    def c40, 239.999985, 179.999985, 119.999992, 59.9999962
    def c41, -299.999969, 359.999969, 299.999969, 60
    def c42, 3, 0.00568318507, -0.0153738316, -0.00457836827
    def c43, -0.00169961189, 0.0187596753, 9.75498187e-005, -0.00203976943
    def c44, -1.5373832, 1.8759675, -0.203976959, 0.00571428565
    def c45, 3.2409699, -0.969243646, 0.0556300804, 0.0142857153
    def c46, 0.0340991095, -0.0101976711, 0.000585298927, 0.47299999
    def c47, -0.457836837, 0.0381568894, 0.970537603, 0.00572519051
    def c48, 0.00999999978, 0.5, 0.00418994389, 0.572519064
    def c49, 1.06843567, 6.28318548, 1.04719758, -2.09439516
    def c50, 0.0097833341, 0.298999995, 1.79399991, 0.587000012
    def c51, 59, 179, 119, 1.5
    def c52, 3.52200007, 0.684000015, 0.114, 0.298999995
    def c53, 0.684000015, 1.79399991, 0.587000012, 0.114
    def c54, 3, 0.0511486642, -0.0153738316, 0.0340991095
    def c55, -0.0152965058, 0.0187596753, 0.000877948361, -0.00203976943
    def c56, 2, 0.5, -2, -0.5
    def c57, 1, -1, 0, 2
    def c58, 0.00999999978, 0.0166666675, 1, -0.0199999996
    def c59, -0.00457836827, 0.000381568912, 0.00970537588, 0.185000002
    def c60, 0.00277777785, -0.333333343, -0.666666687, 9.99999029e-005
    def c61, 3, 4, 5, 6
    def c62, 7, 8, 9, 10
    def c63, 11, 12, 13, 14
    def c64, 6.28318548, -4.18879032, 0.00572519051, 1
    def c65, -299, -239, -179, -119
    def c66, 0.0187596753, 0.000585298927, -0.00203976943, 0
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0

#line 1023 "C:\Users\james\GitHub\Imagin.NET\Imagin.Common.WPF\Effects\ColorModel.fx"
    texld r0, v0, s0  // ::color<3>

#line 1032
    add r1.x, c57.x, -v0.y  // ::y<0>

#line 1036
    mov r2, c57
    add r1.y, r2.y, c2.x

#line 1041
    cmp r3.y, -r1_abs.y, c3.x, v0.x  // ::x<0>
    cmp r3.z, -r1_abs.y, c4.x, r1.x  // ::y<0>
    cmp r3.x, -r1_abs.y, r1.x, c5.x  // ::z<0>

#line 1048
    abs r1.x, c1.x

#line 1054
    add r1.y, r2.y, c1.x

#line 1065
    cmp r4.yz, -r1_abs.y, r3.xxzw, r3.xzxw  // ::input<1,2>
    mov r4.x, r3.y
    cmp r1.xyz, -r1.x, r3, r4  // ::input<0,1,2>

#line 64
    if_eq c0.x, r2.z

#line 67
      mov r3.xyz, c57.x  // ::Maximums<0,1,2>
      mov r1.w, c57.x
    else

#line 70
      if_eq c0.x, r2.x

#line 73
        mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
        mov r1.w, c57.x
      else

#line 76
        if_eq c0.x, r2.w

#line 79
          mov r3.xyz, c11.yxww  // ::Maximums<0,1,2>
          mov r1.w, c57.x
        else

#line 82
          mov r4.x, c0.x  // ::Model<0>
          if_eq r4.x, c61.x

#line 85
            mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
            mov r1.w, c57.x
          else

#line 88
            if_eq r4.x, c61.y

#line 91
              mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
              mov r1.w, c57.x
            else

#line 94
              if_eq r4.x, c61.z

#line 97
                mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
                mov r1.w, c57.x
              else

#line 100
                if_eq r4.x, c61.w

#line 103
                  mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
                  mov r1.w, c57.x
                else

#line 106
                  if_eq r4.x, c62.x

#line 109
                    mov r3.xyz, c11.yxww  // ::Maximums<0,1,2>
                    mov r1.w, c57.x
                  else

#line 112
                    if_eq r4.x, c62.y

#line 115
                      mov r3.xyz, c11.yxxw  // ::Maximums<0,1,2>
                      mov r1.w, c57.x
                    else

#line 118
                      if_eq r4.x, c62.z

#line 121
                        mov r3.xyz, c9.y  // ::Maximums<0,1,2>
                        mov r1.w, c57.x
                      else

#line 124
                        if_eq r4.x, c62.w

#line 127
                          mov r3.xyz, c11.xzzw  // ::Maximums<0,1,2>
                          mov r1.w, c57.x
                        else

#line 130
                          if_eq r4.x, c63.x

#line 133
                            mov r3.xyz, c11.xxyw  // ::Maximums<0,1,2>
                            mov r1.w, c57.x
                          else

#line 136
                            if_eq r4.x, c63.y

#line 139
                              mov r3.xyz, c11.xxyw  // ::Maximums<0,1,2>
                              mov r1.w, c57.x
                            else

#line 142
                              if_eq r4.x, c63.z

#line 145
                                mov r3.xyz, c9.y  // ::Maximums<0,1,2>
                                mov r1.w, c57.x
                              else

#line 148
                                if_eq r4.x, c63.w

#line 151
                                  mov r3.xyz, c9.yzww  // ::Maximums<0,1,2>
                                  mov r1.w, c57.x
                                else

#line 172
                                  add r5, r4.x, c7

#line 196
                                  add r4, r4.x, c8

#line 199
                                  mov r6.xy, c9
                                  cmp r6, -r4_abs.wzzz, r6.xxxy, c10  // ::Maximums<0,1,2>
                                  cmp r6, -r4_abs.zyyy, c9.xzwy, r6  // ::Maximums<0,1,2>
                                  cmp r6, -r4_abs.yxxx, c9.xyyy, r6  // ::Maximums<0,1,2>
                                  cmp r3.w, -r4_abs.x, c57.x, r6.x
                                  cmp r4.xyz, -r5_abs.w, c11.xxyw, r6.yzww  // ::Maximums<0,1,2>
                                  cmp r3.w, -r5_abs.w, c57.x, r3.w
                                  cmp r4.xyz, -r5_abs.z, c11.xxyw, r4  // ::Maximums<0,1,2>
                                  cmp r3.w, -r5_abs.z, c57.x, r3.w
                                  cmp r4.xyz, -r5_abs.y, c11.xxyw, r4  // ::Maximums<0,1,2>
                                  cmp r3.w, -r5_abs.y, c57.x, r3.w
                                  cmp r3.xyz, -r5_abs.x, c57.x, r4  // ::Maximums<0,1,2>
                                  cmp r1.w, -r5_abs.x, c57.x, r3.w
                                endif
                              endif
                            endif
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    cmp r3.xyz, -r1.w, c57.z, r3  // ::Maximums<0,1,2>

#line 222
    mov r4.x, c0.x  // ::Model<0>
    add r5, r4.x, c6

#line 241
    add r4.yzw, r4.x, c12.xxyz
    cmp r6, -r4_abs.yyyz, r2.zzzy, c13  // ::Minimums<0,1,2>

#line 235
    cmp r6.xyz, -r5_abs.w, c57.z, r6  // ::Minimums<0,1,2>
    cmp r6.xyz, -r5_abs.z, c57.z, r6  // ::Minimums<0,1,2>
    cmp r6.xyz, -r5_abs.y, c39.xyyw, r6  // ::Minimums<0,1,2>
    cmp r6.xyz, -r5_abs.x, c57.z, r6  // ::Minimums<0,1,2>

#line 241
    cmp r1.w, -r4_abs.y, c57.y, r6.w
    cmp r1.w, -r5_abs.w, c57.y, r1.w
    cmp r1.w, -r5_abs.z, c57.y, r1.w
    cmp r1.w, -r5_abs.y, c57.y, r1.w
    cmp r1.w, -r5_abs.x, c57.y, r1.w

#line 250
    cmp r4.yzw, -r4_abs.w, c13.xyzx, c13.x  // ::Minimums<0,1,2>
    cmp r4.yzw, r1.w, r4, r6.xxyz  // ::Minimums<0,1,2>

#line 31
    add r1.w, r3.y, -r4.z
    mul r1.w, r1.w, r1.y
    lrp r5.xyz, r1, r3, r4.yzww  // ConvertRange::value<0,1,2>

#line 1072
    if_eq c0.x, r2.z

#line 1075
      mov r0.xyz, r5  // ::output<0,1,2>
    else
      if_eq c0.x, r2.x

#line 261
        mul r1.xy, r5.yzzw, c12.w  // ::c<0>, ::g<0>

#line 269
        if_eq r1.x, c57.z

#line 318
          mov r0.xyz, r1.y  // ::FromHCV<0,1,2>
        else

#line 261
          mul r1.z, r5.x, c39.z  // ::h<0>

#line 269
          cmp r2.x, r5.x, c57.x, c57.y
          mul r1.z, r1.z, r2.x
          frc r1.z, r1.z
          mul r1.z, r1.z, r2.x
          mul r2.x, r1.z, c61.w  // ::hi<0>
          cmp r1.z, r1.z, c57.x, c57.y
          mul r2.y, r1.z, r2.x

#line 274
          frc r2.yz, r2.xyxw

#line 270
          mul r3.x, r1.z, r2.y  // ::v<0>

#line 274
          add r2.x, -r2.z, r2.x  // ::fhi<0>

#line 300
          add r6, r2.x, c14

#line 311
          mov r3.yz, c57.xzxw
          mad r3.w, r1.z, -r2.y, c57.x
          cmp r7.xyz, -r6_abs.w, r3, r3.zyww  // ::pure<0,1,2>
          mad r8.xyz, r3.xzyw, c57.yxxw, c57.xzzw
          cmp r7.xyz, -r6_abs.z, r8.zxyw, r7  // ::pure<0,1,2>
          cmp r6.yzw, -r6_abs.y, r3.xyzx, r7.xxyz  // ::pure<0,1,2>
          cmp r6.xyz, -r6_abs.x, r8, r6.yzww  // ::pure<0,1,2>
          cmp r2.xyz, -r2_abs.x, r3.zxyw, r6  // ::pure<0,1,2>

#line 317
          lrp r0.xyz, r1.x, r2, r1.y  // ::result<0,1,2>
        endif

#line 1080
      else
        if_eq c0.x, r2.w

#line 323
          cmp r1.xy, r5.x, c15, c15.zwzw
          mul r1.y, r1.y, r5.x
          frc r1.y, r1.y
          mad r1.x, r1.x, r1.y, c39.w
          mul r1.y, r1.y, c39.w
          cmp r1.x, r5.x, r1.y, r1.x
          min r1.yz, r5, c11.xxww
          mul r2.xy, r1.yzzw, c23
          cmp r1.yz, r1, r2.xxyw, c57.z  // ::s<0>, ::i<0>

#line 330
          if_lt r1.x, c23.z
            add r2.x, -r1.y, c57.x
            mul r0.z, r1.z, r2.x  // ::b<0>
            mad r2.x, r1.x, c18.x, c18.y
            frc r2.x, r2.x
            mad r2.x, r2.x, c18.z, c18.w
            sincos r3.x, r2.x
            mul r2.x, r1.y, r3.x
            mad r2.y, r1.x, -c16.x, c16.y
            mad r2.y, r2.y, c16.z, c16.w
            frc r2.y, r2.y
            mad r2.y, r2.y, c18.z, c18.w
            sincos r6.x, r2.y
            rcp r2.y, r6.x
            mad r2.x, r2.x, r2.y, c57.x
            mul r0.x, r1.z, r2.x  // ::r<0>
            mad r2.x, r3.x, -r2.y, c57.x
            mad r2.x, r1.y, r2.x, c57.x
            mul r0.y, r1.z, r2.x  // ::g<0>
          else
            if_lt r1.x, c23.w
              mad r2.x, r1.x, c17.x, c17.y  // ::h<0>
              add r2.y, -r1.y, c57.x
              mul r0.x, r1.z, r2.y  // ::r<0>
              mad r2.y, r2.x, c16.z, c16.w
              frc r2.y, r2.y
              mad r2.y, r2.y, c18.z, c18.w
              sincos r3.x, r2.y
              mul r2.y, r1.y, r3.x
              add r2.x, -r2.x, c16.y
              mad r2.x, r2.x, c16.z, c16.w
              frc r2.x, r2.x
              mad r2.x, r2.x, c18.z, c18.w
              sincos r6.x, r2.x
              rcp r2.x, r6.x
              mad r2.y, r2.y, r2.x, c57.x

#line 341
              mad r2.x, r3.x, -r2.x, c57.x
              mad r2.x, r1.y, r2.x, c57.x
              mul r0.yz, r1.z, r2.xyxw  // ::g<0>, ::b<0>
            else

#line 345
              mad r1.x, r1.x, c17.x, c17.z  // ::h<0>
              add r2.x, -r1.y, c57.x
              mul r0.y, r1.z, r2.x  // ::g<0>
              mad r2.x, r1.x, c16.z, c16.w
              frc r2.x, r2.x
              mad r2.x, r2.x, c18.z, c18.w
              sincos r3.x, r2.x
              mul r2.x, r1.y, r3.x
              add r1.x, -r1.x, c16.y
              mad r1.x, r1.x, c16.z, c16.w
              frc r1.x, r1.x
              mad r1.x, r1.x, c18.z, c18.w
              sincos r6.x, r1.x
              rcp r1.x, r6.x
              mad r2.x, r2.x, r1.x, c57.x
              mul r0.z, r1.z, r2.x  // ::b<0>
              mad r1.x, r3.x, -r1.x, c57.x
              mad r1.x, r1.y, r1.x, c57.x
              mul r0.x, r1.x, r1.z  // ::r<0>
            endif
          endif

#line 1085
        else
          if_eq r4.x, c61.x

#line 679
            mul r1.xyz, r5.yxyw, c42

#line 743
            mad r1.x, r5.z, c57.w, -r1.x
            mad r1.x, r5.x, c17.w, r1.x  // ::z<0>

#line 679
            add r1.y, r1.z, r1.y
            mad r1.y, r1.x, c42.w, r1.y  // ::r<0>
            mul r2, r5.xyxy, c43
            add r2.xy, r2.ywzw, r2.xzzw
            mad r1.xz, r1.x, c19.xyyw, r2.xyyw  // ::g<0>, ::b<0>

#line 684
            add r2.x, -r1.y, c19.z
            pow r2.y, r1.y, c19.w
            mad r2.y, r2.y, c20.x, c20.y  // ::r<0>

#line 690
            mul r1.y, r1.y, c20.z  // ::r<0>
            cmp r1.y, r2.x, r1.y, r2.y  // ::r<0>

#line 700
            add r2.xy, -r1.xzzw, c19.z

#line 694
            pow r2.z, r1.x, c19.w
            mad r2.z, r2.z, c20.x, c20.y  // ::g<0>

#line 706
            mul r3.xy, r1.xzzw, c20.z  // ::g<0>, ::b<0>

#line 699
            cmp r1.x, r2.x, r3.x, r2.z  // ::g<0>

#line 702
            pow r2.x, r1.z, c19.w
            mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 707
            cmp r1.z, r2.y, r3.y, r1.z  // ::b<0>
            mov_sat r2.x, r1.y
            cmp r0.x, r1.y, r2.x, c57.z  // ::r<0>
            mov_sat r1.y, r1.x
            cmp r0.y, r1.x, r1.y, c57.z  // ::g<0>
            mov_sat r1.x, r1.z
            cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1090
          else
            if_eq r4.x, c61.y

#line 370
              mul r1.xyz, r5.yzxw, c58.xxyw  // ::_s<0>, ::_b<0>, ::SectorPosition<0>
              frc r2.x, r1.z
              add r1.z, r1.z, -r2.x  // ::SectorNumber<0>

#line 374
              mad r2.x, r5.x, c20.w, -r1.z  // ::FractionalSector<0>

#line 377
              mad r2.y, r5.y, -c58.x, c58.z
              mul r3.y, r1.y, r2.y  // ::p<0>
              mad r2.y, r1.x, -r2.x, c57.x
              add r2.x, -r2.x, c57.x
              mad r2.x, r1.x, -r2.x, c57.x
              mul r3.xz, r1.y, r2.xyyw  // ::t<0>, ::q<0>

#line 406
              add r2, r1.z, c14

#line 412
              add r4.y, r1.z, -c61.z

#line 417
              mov r3.w, r1.y
              cmp r6.xyz, -r4_abs.y, r3.wyzw, c57.z  // ::r<0>, ::g<0>, ::b<0>
              cmp r6.xyz, -r2_abs.w, r3.xyww, r6  // ::r<0>, ::g<0>, ::b<0>
              cmp r6.xyz, -r2_abs.z, r3.yzww, r6  // ::r<0>, ::g<0>, ::b<0>
              cmp r2.yzw, -r2_abs.y, r3.xywx, r6.xxyz  // ::r<0>, ::g<0>, ::b<0>
              cmp r2.xyz, -r2_abs.x, r3.zwyw, r2.yzww  // ::r<0>, ::g<0>, ::b<0>
              cmp r2.xyz, -r1_abs.z, r3.wxyw, r2  // ::r<0>, ::g<0>, ::b<0>
              cmp r0.xyz, -r1_abs.x, r1.y, r2  // ::r<0>, ::g<0>, ::b<0>

#line 1095
            else
              if_eq r4.x, c61.z

#line 427
                mul r0.xyz, r5.z, c12.w  // ::l<0,0,0>

#line 432
                if_lt -r5.y, c57.z
                  mul r1.xy, r5.yxzw, c58  // ::s<0>, ::h<0>
                  mad r1.z, r5.z, -c58.w, -c58.z
                  add r1.z, -r1_abs.z, c57.x
                  mul r2.x, r1.x, r1.z  // ::chroma<0>
                  cmp r1.xz, r5.x, c56.xyyw, c56.zyww
                  mul r1.y, r1.z, r1.y
                  frc r1.y, r1.y
                  mad r1.x, r1.x, r1.y, c57.y
                  add r1.x, -r1_abs.x, c57.x
                  mul r2.y, r1.x, r2.x  // ::v<0>

#line 455
                  add r3, -r5.x, c40

#line 461
                  add r6, r5.x, -c40.wzyx

#line 467
                  add r1.x, r5.x, c41.x
                  add r1.yz, -r5.x, c41

#line 472
                  cmp r1.yz, r1, -c57.x, -c57.z
                  cmp r1.x, r1.x, r1.y, c57.z
                  mov r2.z, c57.z
                  cmp r7.xyz, r1.x, c57.z, r2.xzyw  // ::result<0,1,2>
                  cmp r1.x, r6.w, r1.z, c57.z
                  cmp r1.xyz, r1.x, r7, r2.yzxw  // ::result<0,1,2>
                  cmp r3, r3, -c57.x, -c57.z
                  cmp r3.xyz, r6.zyxw, r3, c57.z
                  cmp r1.xyz, r3.x, r1, r2.zyxw  // ::result<0,1,2>
                  cmp r1.xyz, r3.y, r1, r2.zxyw  // ::result<0,1,2>
                  cmp r1.xyz, r3.z, r1, r2.yxzw  // ::result<0,1,2>
                  cmp r2.w, r5.x, r3.w, c57.z
                  cmp r1.xyz, r2.w, r1, r2  // ::result<0,1,2>
                  mad r2.x, r2.x, -c18.y, r0.z  // ::w<0>

#line 477
                  add r0.xyz, r1, r2.x  // ::result<0,1,2>

#line 482
                endif

#line 1100
              else
                if_eq r4.x, c61.w

#line 679
                  mul r1.xyz, r5.yxyw, c42

#line 743
                  mad r1.x, r5.z, c57.w, -r1.x
                  mad r1.x, r5.x, c17.w, r1.x  // ::z<0>

#line 679
                  add r1.y, r1.z, r1.y
                  mad r1.y, r1.x, c42.w, r1.y  // ::r<0>
                  mul r2, r5.xyxy, c43
                  add r2.xy, r2.ywzw, r2.xzzw
                  mad r1.xz, r1.x, c19.xyyw, r2.xyyw  // ::g<0>, ::b<0>

#line 684
                  add r2.x, -r1.y, c19.z
                  pow r2.y, r1.y, c19.w
                  mad r2.y, r2.y, c20.x, c20.y  // ::r<0>

#line 690
                  mul r1.y, r1.y, c20.z  // ::r<0>
                  cmp r1.y, r2.x, r1.y, r2.y  // ::r<0>

#line 700
                  add r2.xy, -r1.xzzw, c19.z

#line 694
                  pow r2.z, r1.x, c19.w
                  mad r2.z, r2.z, c20.x, c20.y  // ::g<0>

#line 706
                  mul r3.xy, r1.xzzw, c20.z  // ::g<0>, ::b<0>

#line 699
                  cmp r1.x, r2.x, r3.x, r2.z  // ::g<0>

#line 702
                  pow r2.x, r1.z, c19.w
                  mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 707
                  cmp r1.z, r2.y, r3.y, r1.z  // ::b<0>
                  mov_sat r2.x, r1.y
                  cmp r0.x, r1.y, r2.x, c57.z  // ::r<0>
                  mov_sat r1.y, r1.x
                  cmp r0.y, r1.x, r1.y, c57.z  // ::g<0>
                  mov_sat r1.x, r1.z
                  cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1105
                else
                  if_eq r4.x, c62.x

#line 497
                    mad r1.x, r5.y, -c58.x, c58.z  // ::minOverMax<0>
                    if_lt -r1.x, c57.z

#line 502
                      if_lt r5.x, c41.w
                        mul r1.y, r5.x, c20.w  // ::h<0>
                        rcp r1.z, r1.x
                        add r2.x, r1.z, c57.y
                        mad r2.x, r1.y, r2.x, c57.x  // ::part<0>
                        mul r2.y, r1.z, r1.z
                        mul r2.x, r2.x, r2.x
                        mul r2.x, r2.x, c22.x
                        mad r2.x, r2.y, c22.y, r2.x
                        add r2.x, r2.x, c22.z
                        rsq r2.x, r2.x
                        mul r2.z, r2.x, r5.z  // ::b<0>
                        mul r2.x, r1.z, r2.z  // ::r<0>
                        mad r1.z, r2.z, r1.z, -r2.z
                        mad r2.y, r1.y, r1.z, r2.z  // ::g<0>
                      else
                        if_lt r5.x, c23.z

#line 513
                          mad r1.y, r5.x, -c21.x, c21.y
                          mul r1.y, r1.y, c61.w  // ::h<0>
                          rcp r1.z, r1.x
                          add r2.w, r1.z, c57.y
                          mad r2.w, r1.y, r2.w, c57.x  // ::part<0>
                          mul r3.x, r1.z, r1.z
                          mul r2.w, r2.w, r2.w
                          mul r2.w, r2.w, c22.y
                          mad r2.w, r3.x, c22.x, r2.w
                          add r2.w, r2.w, c22.z
                          rsq r2.w, r2.w
                          mul r2.z, r2.w, r5.z  // ::b<0>
                          mul r2.y, r1.z, r2.z  // ::g<0>
                          mad r1.z, r2.z, r1.z, -r2.z
                          mad r2.x, r1.y, r1.z, r2.z  // ::r<0>
                        else
                          if_lt r5.x, c22.w
                            mad r1.y, r5.x, c21.x, c21.z
                            mul r1.y, r1.y, c61.w  // ::h<0>
                            rcp r1.z, r1.x
                            add r2.w, r1.z, c57.y
                            mad r2.w, r1.y, r2.w, c57.x  // ::part<0>

#line 524
                            mul r3.x, r1.z, r1.z
                            mul r2.w, r2.w, r2.w
                            mul r2.w, r2.w, c22.z
                            mad r2.w, r3.x, c22.x, r2.w
                            add r2.w, r2.w, c22.y
                            rsq r2.w, r2.w
                            mul r2.x, r2.w, r5.z  // ::r<0>
                            mul r2.y, r1.z, r2.x  // ::g<0>
                            mad r1.z, r2.x, r1.z, -r2.x
                            mad r2.z, r1.y, r1.z, r2.x  // ::b<0>
                          else
                            if_lt r5.x, c23.w
                              mad r1.y, r5.x, -c21.x, c21.w
                              mul r1.y, r1.y, c61.w  // ::h<0>
                              rcp r1.z, r1.x
                              add r2.w, r1.z, c57.y
                              mad r2.w, r1.y, r2.w, c57.x  // ::part<0>
                              mul r3.x, r1.z, r1.z
                              mul r2.w, r2.w, r2.w
                              mul r2.w, r2.w, c22.x
                              mad r2.w, r3.x, c22.z, r2.w
                              add r2.w, r2.w, c22.y
                              rsq r2.w, r2.w
                              mul r2.x, r2.w, r5.z  // ::r<0>
                              mul r2.z, r1.z, r2.x  // ::b<0>

#line 535
                              mad r1.z, r2.x, r1.z, -r2.x
                              mad r2.y, r1.y, r1.z, r2.x  // ::g<0>
                            else
                              add r1.y, r5.x, c38.x
                              mad r1.z, r5.x, c38.y, c38.z
                              mul r1.z, r1.z, c61.w  // ::h<0>
                              rcp r1.x, r1.x
                              add r2.w, r1.x, c57.y
                              mad r3.x, r1.z, r2.w, c57.x  // ::part<0>
                              mul r3.y, r1.x, r1.x

#line 551
                              mul r3.yz, r3.y, c22.xzyw

#line 542
                              mul r3.x, r3.x, r3.x
                              mad r3.x, r3.x, c22.y, r3.y
                              add r3.x, r3.x, c22.x
                              rsq r3.x, r3.x
                              mul r6.y, r3.x, r5.z  // ::g<0>
                              mul r6.z, r1.x, r6.y  // ::b<0>
                              mad r3.x, r6.y, r1.x, -r6.y
                              mad r6.x, r1.z, r3.x, r6.y  // ::r<0>

#line 549
                              mad r1.z, r5.x, -c38.y, c38.w
                              mul r1.z, r1.z, c61.w  // ::h<0>
                              mad r2.w, r1.z, r2.w, c57.x  // ::part<0>
                              mul r2.w, r2.w, r2.w
                              mad r2.w, r2.w, c22.z, r3.z
                              add r2.w, r2.w, c22.x
                              rsq r2.w, r2.w
                              mul r3.y, r2.w, r5.z  // ::g<0>
                              mul r3.x, r1.x, r3.y  // ::r<0>
                              mad r1.x, r3.y, r1.x, -r3.y
                              mad r3.z, r1.z, r1.x, r3.y  // ::b<0>
                              cmp r2.xyz, r1.y, r3, r6  // ::r<0>, ::g<0>, ::b<0>
                            endif
                          endif
                        endif
                      endif
                    else

#line 559
                      if_lt r5.x, c41.w
                        mul r1.x, r5.x, c20.w  // ::h<0>
                        mul r1.y, r5.z, r5.z
                        mul r1.z, r5.x, r1.x
                        mad r1.z, r1.z, c50.x, c50.y
                        rcp r1.z, r1.z
                        mul r1.y, r1.z, r1.y
                        rsq r1.y, r1.y
                        rcp r2.x, r1.y  // ::r<0>
                        mul r2.y, r1.x, r2.x  // ::g<0>
                        mov r2.z, c57.z
                      else
                        if_lt r5.x, c23.z
                          mad r1.x, r5.x, -c21.x, c21.y
                          mul r1.y, r1.x, c61.w  // ::h<0>

#line 570
                          mul r1.z, r5.z, r5.z
                          mul r1.x, r1.x, r1.y
                          mad r1.x, r1.x, c50.z, c50.w
                          rcp r1.x, r1.x
                          mul r1.x, r1.x, r1.z
                          rsq r1.x, r1.x
                          rcp r2.y, r1.x  // ::g<0>
                          mul r2.x, r1.y, r2.y  // ::r<0>
                          mov r2.z, c57.z
                        else

#line 593
                          mad r1.xy, r5.x, c60.x, c60.yzzw
                          mul r3.xy, r1, c61.w  // ::h<0,0>

#line 578
                          mul r1.z, r5.z, r5.z

#line 594
                          mul r1.xy, r1, r3
                          mad r1.xy, r1, c53, c53.zwzw

#line 578
                          rcp r1.x, r1.x
                          mul r1.x, r1.x, r1.z
                          rsq r1.x, r1.x
                          rcp r6.y, r1.x  // ::g<0>
                          mul r6.z, r3.x, r6.y  // ::b<0>

#line 601
                          mad r3.xz, r5.x, -c38_abs.y, c38_abs.zyww
                          mul r4.yw, r3.xxzz, c61.w  // ::h<0,0>
                          mul r3.xz, r3, r4.yyww
                          mad r3.xz, r3, c52.xyyw, c52.zyww

#line 586
                          rcp r1.x, r3.x
                          mul r1.x, r1.x, r1.z
                          rsq r1.x, r1.x
                          rcp r7.z, r1.x  // ::b<0>
                          mul r7.y, r4.y, r7.z  // ::g<0>

#line 591
                          add r8.xyz, r5.x, c24

#line 594
                          rcp r1.x, r1.y
                          mul r1.x, r1.x, r1.z
                          rsq r1.x, r1.x
                          rcp r9.z, r1.x  // ::b<0>
                          mul r9.x, r3.y, r9.z  // ::r<0>

#line 602
                          rcp r1.x, r3.z
                          mul r1.x, r1.x, r1.z
                          rsq r1.x, r1.x
                          rcp r1.x, r1.x  // ::r<0>
                          mul r1.z, r4.w, r1.x  // ::b<0>
                          mov r1.y, c57.z
                          mov r9.y, c57.z
                          cmp r1.xyz, r8.z, r1, r9  // ::r<0>, ::g<0>, ::b<0>
                          mov r7.x, c57.z
                          cmp r1.xyz, r8.y, r1, r7  // ::r<0>, ::g<0>, ::b<0>
                          mov r6.x, c57.z
                          cmp r2.xyz, r8.x, r1, r6  // ::r<0>, ::g<0>, ::b<0>
                        endif
                      endif
                    endif

#line 609
                    add r1.xyz, r2, c18.y
                    frc r2.xyz, r1
                    add r1.xyz, r1, -r2
                    mul r1.xyz, r1, c23.y  // Coerce::input<0,0,0>

#line 24
                    min r2.xyz, r1, c57.x
                    max r0.xyz, r2, c57.z  // ::Coerce<0,0,0>

#line 1110
                  else
                    if_eq r4.x, c62.y

#line 618
                      mul r1.xy, r5.yzzw, c12.w  // ::white<0>, ::black<0>
                      add r1.y, r1.y, r1.x

#line 626
                      if_ge r1.y, c57.x

#line 622
                        rcp r1.y, r1.y
                        mul r0.xyz, r1.y, r1.x  // ::gray<0,0,0>

#line 636
                      else

#line 428
                        mul r1.y, r5.x, c20.w  // ::h<0>

#line 435
                        cmp r2.xy, r5.x, c56, c56.zwzw
                        mul r1.y, r1.y, r2.y
                        frc r1.y, r1.y
                        mad r1.y, r2.x, r1.y, c57.y
                        add r1.y, -r1_abs.y, c57.x
                        mul r2.y, r1.y, c60.w  // ::v<0>

#line 455
                        add r3, -r5.x, c40

#line 461
                        add r6, r5.x, -c40.wzyx

#line 467
                        add r1.y, r5.x, c41.x
                        add r4.yw, -r5.x, c41.xyzz

#line 472
                        cmp r4.yw, r4, -c57.x, -c57.z
                        cmp r1.y, r1.y, r4.y, c57.z
                        mov r2.xz, c27.xyyw
                        cmp r7.xyz, r1.y, c57.z, r2.xzyw  // ::result<0,1,2>
                        cmp r1.y, r6.w, r4.w, c57.z
                        cmp r7.xyz, r1.y, r7, r2.yzxw  // ::result<0,1,2>
                        cmp r3, r3, -c57.x, -c57.z
                        cmp r3.xyz, r6.zyxw, r3, c57.z
                        cmp r6.xyz, r3.x, r7, r2.zyxw  // ::result<0,1,2>
                        cmp r6.xyz, r3.y, r6, r2.zxyw  // ::result<0,1,2>
                        cmp r3.xyz, r3.z, r6, r2.yxzw  // ::result<0,1,2>
                        cmp r1.y, r5.x, r3.w, c57.z
                        cmp r2.xyz, r1.y, r3, r2  // ::result<0,1,2>

#line 477
                        add r2.xyz, r2, c24.w  // ::result<0,1,2>

#line 628
                        mad r1.y, r5.y, -c58.x, c58.z
                        mad r1.y, r5.z, -c12.w, r1.y

#line 635
                        mad r0.xyz, r2, r1.y, r1.x  // ::rgb<0,1,2>
                      endif

#line 1115
                    else
                      if_eq r4.x, c62.z

#line 763
                        add r1.x, r5.x, -c7.y
                        mul r1.y, r1.x, c27.z  // ::xyz<1>
                        mul r1.z, r5.z, c27.w
                        mad r2.x, r5.y, c25.x, r1.y  // ::xyz<0>
                        mad r1.z, r1.x, c27.z, -r1.z  // ::xyz<2>

#line 769
                        mul r2.y, r2.x, r2.x
                        mul r2.y, r2.x, r2.y  // ::pow<0>
                        add r2.z, -r2.x, c25.y

#line 777
                        add r2.x, r2.x, c25.z
                        mul r2.x, r2.x, c25.w  // ::xyz<0>
                        cmp r2.x, r2.z, r2.x, r2.y  // ::xyz<0>

#line 769
                        mul r2.y, r1.y, r1.y
                        mul r1.y, r1.y, r2.y  // ::pow<0>
                        add r2.y, -r1.x, c26.x

#line 777
                        mad r1.x, r1.x, c26.y, c26.z
                        mul r1.x, r1.x, c25.w  // ::xyz<1>
                        cmp r1.x, r2.y, r1.x, r1.y  // ::xyz<1>

#line 769
                        mul r1.y, r1.z, r1.z
                        mul r1.y, r1.z, r1.y  // ::pow<0>
                        add r2.y, -r1.z, c25.y

#line 777
                        add r1.z, r1.z, c25.z
                        mul r1.z, r1.z, c25.w  // ::xyz<2>
                        cmp r1.y, r2.y, r1.z, r1.y  // ::xyz<2>

#line 681
                        mul r2.yzw, r1.x, c44.xxyz
                        mad r2.xyz, r2.x, c45, r2.yzww
                        mad r1.xyz, r1.y, c29, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                        add r2.xyz, -r1, c19.z

#line 686
                        pow r2.w, r1.x, c19.w
                        mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                        mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                        cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                        pow r2.x, r1.y, c19.w
                        mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                        pow r2.x, r1.z, c19.w
                        mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                        cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                        mov_sat r2.x, r1.x
                        cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                        mov_sat r1.x, r1.y
                        cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                        mov_sat r1.x, r1.z
                        cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1120
                      else
                        if_eq r4.x, c62.w

#line 791
                          mul r1.x, r5.x, c26.w  // ::_y<0>
                          mul r1.yz, r5.x, r5
                          mul r1.x, r1.x, r1.x  // ::y<0>
                          mad r1.y, r1.y, c44.w, r1.x
                          mad r1.z, r1.z, c45.w, -r1.x

#line 681
                          mul r2.xyz, r1.x, c30
                          mad r2.xyz, r1.y, c32, r2
                          mad r1.xyz, r1.z, c33, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                          add r2.xyz, -r1, c19.z

#line 686
                          pow r2.w, r1.x, c19.w
                          mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                          mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                          cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                          pow r2.x, r1.y, c19.w
                          mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                          pow r2.x, r1.z, c19.w
                          mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                          cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                          mov_sat r2.x, r1.x
                          cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                          mov_sat r1.x, r1.y
                          cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                          mov_sat r1.x, r1.z
                          cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1125
                        else
                          if_eq r4.x, c63.x

#line 953
                            mad r1.x, r5.z, c28.x, c28.y
                            frc r1.x, r1.x
                            mad r1.x, r1.x, c18.z, c18.w
                            sincos r2.xy, r1.x
                            mul r1.xy, r2, r5.y  // ::a<0>, ::b<0>

#line 763
                            add r1.z, r5.x, -c7.y
                            mul r2.x, r1.z, c27.z  // ::xyz<1>
                            mul r1.y, r1.y, c27.w
                            mad r1.x, r1.x, c25.x, r2.x  // ::xyz<0>
                            mad r1.y, r1.z, c27.z, -r1.y  // ::xyz<2>

#line 769
                            mul r2.y, r1.x, r1.x
                            mul r2.y, r1.x, r2.y  // ::pow<0>
                            add r2.z, -r1.x, c25.y

#line 777
                            add r1.x, r1.x, c25.z
                            mul r1.x, r1.x, c25.w  // ::xyz<0>
                            cmp r1.x, r2.z, r1.x, r2.y  // ::xyz<0>

#line 769
                            mul r2.y, r2.x, r2.x
                            mul r2.x, r2.x, r2.y  // ::pow<0>
                            add r2.y, -r1.z, c26.x

#line 777
                            mad r1.z, r1.z, c26.y, c26.z
                            mul r1.z, r1.z, c25.w  // ::xyz<1>
                            cmp r1.z, r2.y, r1.z, r2.x  // ::xyz<1>

#line 769
                            mul r2.x, r1.y, r1.y
                            mul r2.x, r1.y, r2.x  // ::pow<0>
                            add r2.y, -r1.y, c25.y

#line 777
                            add r1.y, r1.y, c25.z
                            mul r1.y, r1.y, c25.w  // ::xyz<2>
                            cmp r1.y, r2.y, r1.y, r2.x  // ::xyz<2>

#line 681
                            mul r2.xyz, r1.z, c44
                            mad r2.xyz, r1.x, c45, r2
                            mad r1.xyz, r1.y, c29, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                            add r2.xyz, -r1, c19.z

#line 686
                            pow r2.w, r1.x, c19.w
                            mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                            mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                            cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                            pow r2.x, r1.y, c19.w
                            mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                            pow r2.x, r1.z, c19.w
                            mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                            cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                            mov_sat r2.x, r1.x
                            cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                            mov_sat r1.x, r1.y
                            cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                            mov_sat r1.x, r1.z
                            cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1130
                          else
                            if_eq r4.x, c63.y

#line 966
                              mad r1.x, r5.z, c28.x, c28.y
                              frc r1.x, r1.x
                              mad r1.x, r1.x, c18.z, c18.w
                              sincos r2.xy, r1.x
                              mul r1.xy, r2, r5.y  // ::a<0>, ::b<0>

#line 763
                              add r1.z, r5.x, -c7.y
                              mul r2.x, r1.z, c27.z  // ::xyz<1>
                              mul r1.y, r1.y, c27.w
                              mad r1.x, r1.x, c25.x, r2.x  // ::xyz<0>
                              mad r1.y, r1.z, c27.z, -r1.y  // ::xyz<2>

#line 769
                              mul r2.y, r1.x, r1.x
                              mul r2.y, r1.x, r2.y  // ::pow<0>
                              add r2.z, -r1.x, c25.y

#line 777
                              add r1.x, r1.x, c25.z
                              mul r1.x, r1.x, c25.w  // ::xyz<0>
                              cmp r1.x, r2.z, r1.x, r2.y  // ::xyz<0>

#line 769
                              mul r2.y, r2.x, r2.x
                              mul r2.x, r2.x, r2.y  // ::pow<0>
                              add r2.y, -r1.z, c26.x

#line 777
                              mad r1.z, r1.z, c26.y, c26.z
                              mul r1.z, r1.z, c25.w  // ::xyz<1>
                              cmp r1.z, r2.y, r1.z, r2.x  // ::xyz<1>

#line 769
                              mul r2.x, r1.y, r1.y
                              mul r2.x, r1.y, r2.x  // ::pow<0>
                              add r2.y, -r1.y, c25.y

#line 777
                              add r1.y, r1.y, c25.z
                              mul r1.y, r1.y, c25.w  // ::xyz<2>
                              cmp r1.y, r2.y, r1.y, r2.x  // ::xyz<2>

#line 681
                              mul r2.xyz, r1.z, c44
                              mad r2.xyz, r1.x, c45, r2
                              mad r1.xyz, r1.y, c29, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                              add r2.xyz, -r1, c19.z

#line 686
                              pow r2.w, r1.x, c19.w
                              mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                              mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                              cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                              pow r2.x, r1.y, c19.w
                              mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                              pow r2.x, r1.z, c19.w
                              mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                              cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                              mov_sat r2.x, r1.x
                              cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                              mov_sat r1.x, r1.y
                              cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                              mov_sat r1.x, r1.z
                              cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1135
                            else
                              if_eq r4.x, c63.z

#line 727
                                mul r1.xy, r5, c28.zwzw
                                add r1.x, r1.y, r1.x
                                mad r1.x, r5.z, c29.w, r1.x  // ::x<0>
                                mul r2.xyz, r5.yxyw, c31
                                mad r1.y, r5.x, c30.w, r2.x
                                mad r1.y, r5.z, c32.w, r1.y  // ::y<0>
                                add r1.z, r2.z, r2.y
                                mad r1.z, r5.z, c33.w, r1.z  // ::z<0>

#line 681
                                mul r2.xyz, r1.y, c30
                                mad r2.xyz, r1.x, c46, r2
                                mad r1.xyz, r1.z, c59, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                                add r2.xyz, -r1, c19.z

#line 686
                                pow r2.w, r1.x, c19.w
                                mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                                mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                                cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                                pow r2.x, r1.y, c19.w
                                mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                                pow r2.x, r1.z, c19.w
                                mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                                cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                                mov_sat r2.x, r1.x
                                cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                                mov_sat r1.x, r1.y
                                cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                                mov_sat r1.x, r1.z
                                cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1140
                              else
                                if_eq r4.x, c63.w

#line 866
                                  if_ge -r5.x, c57.z

#line 886
                                    mov r0.xyz, c57.z  // ::FromLUV<0,1,2>
                                  else

#line 877
                                    mul r1.xy, r5.x, c34  // ::ll<0>, ::y<0>

#line 867
                                    rcp r1.z, r1.x
                                    mad r2.xy, r5.yzzw, r1.z, c34.zwzw
                                    cmp r1.xz, -r1_abs.x, c57.z, r2.xyyw  // ::u_prime<0>, ::v_prime<0>

#line 871
                                    add r2.x, -r5.x, c62.y
                                    add r2.y, r5.x, -c7.y
                                    mul r2.y, r2.y, c27.z
                                    mul r2.z, r2.y, r2.y
                                    mul r2.y, r2.z, r2.y  // ::y<0>

#line 878
                                    cmp r1.y, r2.x, r1.y, r2.y  // ::y<0>
                                    mul r1.x, r1.y, r1.x
                                    mul r1.x, r1.x, c31.w
                                    rcp r2.x, r1.z
                                    mul r1.x, r1.x, r2.x  // ::a<0>
                                    mad r1.z, r1.z, -c61.z, c61.x
                                    mul r1.z, r1.z, r1.y
                                    mad r1.z, r1.z, r2.x, -r1.x  // ::z<0>

#line 29
                                    mad r1.x, r1.x, c35.x, c35.y  // ConvertRange::value<0>
                                    mad r1.y, r1.y, c35.z, c35.w  // ConvertRange::value<1>

#line 681
                                    mul r2.xyz, r1.y, c30
                                    mad r2.xyz, r1.x, c46, r2
                                    mad r1.xyz, r1.z, c47, r2  // ::r<0>, ::g<0>, ::b<0>

#line 700
                                    add r2.xyz, -r1, c19.z

#line 686
                                    pow r2.w, r1.x, c19.w
                                    mad r2.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                                    mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                                    cmp r1.x, r2.x, r3.x, r2.w  // ::r<0>

#line 694
                                    pow r2.x, r1.y, c19.w
                                    mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                                    pow r2.x, r1.z, c19.w
                                    mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                                    cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                                    mov_sat r2.x, r1.x
                                    cmp r0.x, r1.x, r2.x, c57.z  // ::r<0>
                                    mov_sat r1.x, r1.y
                                    cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                                    mov_sat r1.x, r1.z
                                    cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 886
                                  endif

#line 1145
                                else
                                  if_eq r4.x, -c7.x

#line 654
                                    add r1.x, r5.x, c18.y
                                    frc r1.x, r1.x
                                    mad r1.x, r1.x, c18.z, c18.w
                                    sincos r2.xy, r1.x
                                    rcp r1.x, r2.x
                                    mul r1.x, r1.x, r2.y  // ::x<0>
                                    mul r1.y, r1.x, r1.x  // ::x<0>
                                    mul r1.z, r5.y, r5.y
                                    mul r1.z, r1.z, c61.z
                                    rcp r1.y, r1.y
                                    add r1.y, r1.y, c57.x
                                    mul r1.y, r1.y, c62.z
                                    rcp r1.y, r1.y
                                    mul r1.y, r1.y, r1.z
                                    rsq r1.y, r1.y
                                    rcp r1.y, r1.y  // ::r<0>
                                    mad r1.x, r1.x, r1.x, c57.x
                                    mul r1.x, r1.x, c62.z
                                    rcp r1.x, r1.x
                                    mul r1.x, r1.x, r1.z
                                    rsq r1.x, r1.x
                                    rcp r1.x, r1.x  // ::g<0>
                                    mul r1.z, r1.x, c46.w
                                    mad r1.z, r1.y, c59.w, r1.z
                                    add r1.z, r1.z, c22.z
                                    rcp r1.z, r1.z
                                    mul r1.z, r1.z, r5.z  // ::k<0>
                                    add r2.x, -r1.y, c57.x
                                    add r2.x, -r1.x, r2.x
                                    mul r0.z, r1.z, r2.x  // ::B<0>
                                    mul r0.xy, r1.yxzw, r1.z  // ::R<0>, ::G<0>

#line 1150
                                  else
                                    if_eq r4.x, -c7.y

#line 981
                                      mad r1.xy, r5.yxzw, c36, c36.zwzw  // ::c<0>, ::l<0>

#line 985
                                      mul r2.xy, r1, c12.w

#line 992
                                      mad r2.zw, r1.xyxy, c48.x, c48.y
                                      frc r2.zw, r2
                                      mad r2.zw, r2, c18.z, c18.w

#line 989
                                      sincos r3.y, r2.z
                                      mad r1.x, r1.x, r3.y, -c13.z
                                      sincos r3.x, r2.w
                                      mad r1.y, r1.y, r3.x, -c13.y

#line 261
                                      mul r1.x, r1.x, c47.w  // ::c<0>
                                      mul r3.xyz, r1.y, c48.z  // ::g<0,0,0>

#line 269
                                      if_eq r1.x, c57.z

#line 318
                                        mov r0.xyz, r3  // ::FromHCV<0,1,2>
                                      else

#line 987
                                        mul r1.y, r2.x, r2.y
                                        mul r1.y, r5.z, r1.y
                                        cmp r2.xy, r1.y, c37, c37.zwzw
                                        mul r1.y, r1.y, r2.y
                                        frc r1.y, r1.y
                                        mad r1.y, r2.x, -r1.y, c11.y  // ::h<0>

#line 261
                                        mul r1.y, r1.y, c39.z  // ::h<0>

#line 269
                                        frc r1.y, r1.y
                                        mul r1.y, r1.y, c61.w  // ::hi<0>
                                        frc r2.x, r1.y  // ::v<0>

#line 274
                                        add r1.y, r1.y, -r2.x  // ::fhi<0>

#line 300
                                        add r6, r1.y, c14

#line 311
                                        mov r2.yz, c57.xzxw
                                        add r2.w, -r2.x, c57.x
                                        cmp r3.xyw, -r6_abs.w, r2.xyzz, r2.zyzw  // ::pure<0,1,2>
                                        mad r7.xyz, r2.xzyw, c57.yxxw, c57.xzzw
                                        cmp r3.xyw, -r6_abs.z, r7.zxzy, r3  // ::pure<0,1,2>
                                        cmp r3.xyw, -r6_abs.y, r2.yzzx, r3  // ::pure<0,1,2>
                                        cmp r3.xyw, -r6_abs.x, r7.xyzz, r3  // ::pure<0,1,2>
                                        cmp r2.xyz, -r1_abs.y, r2.zxyw, r3.xyww  // ::pure<0,1,2>

#line 317
                                        lrp r0.xyz, r1.x, r2, r3.z  // ::result<0,1,2>
                                      endif

#line 1155
                                    else
                                      if_eq r4.x, -c7.z

#line 981
                                        mad r1.xy, r5.yxzw, c36, c36.zwzw  // ::c<0>, ::l<0>

#line 985
                                        mul r2.xy, r1, c12.w
                                        mul r1.z, r2.x, r2.y
                                        mul r1.z, r5.z, r1.z
                                        cmp r2.xy, r1.z, c37, c37.zwzw
                                        mul r1.z, r1.z, r2.y
                                        frc r1.z, r1.z
                                        mad r1.z, r2.x, -r1.z, c11.y  // ::h<0>

#line 992
                                        mad r2.xy, r1, c48.x, c48.y
                                        frc r2.xy, r2
                                        mad r2.xy, r2, c18.z, c18.w

#line 989
                                        sincos r3.y, r2.x
                                        mad r1.x, r1.x, r3.y, -c13.z
                                        mul r1.x, r1.x, c48.w  // ::s<0>
                                        sincos r3.x, r2.y
                                        mad r1.y, r1.y, r3.x, -c13.y
                                        mul r1.y, r1.y, c49.x  // ::ToHUV<2>

#line 323
                                        mul r1.z, r1.z, c15.y
                                        frc r1.z, r1.z
                                        mul r2.x, r1.z, c39.w
                                        min r2.y, r1.x, c9.y
                                        mul r1.x, r2.y, c12.w
                                        cmp r1.x, r2.y, r1.x, c57.z  // ::s<0>
                                        min r2.y, r1.y, c11.w
                                        mul r1.y, r2.y, c23.y
                                        cmp r1.y, r2.y, r1.y, c57.z  // ::i<0>

#line 330
                                        if_lt r2.x, c23.z
                                          add r2.y, -r1.x, c57.x
                                          mul r0.z, r1.y, r2.y  // ::b<0>
                                          add r2.y, r1.z, c18.y
                                          frc r2.y, r2.y
                                          mad r2.y, r2.y, c18.z, c18.w
                                          sincos r3.x, r2.y
                                          mul r2.y, r1.x, r3.x
                                          mad r2.z, r1.z, -c49.y, c49.z
                                          mad r2.z, r2.z, c16.z, c16.w
                                          frc r2.z, r2.z
                                          mad r2.z, r2.z, c18.z, c18.w
                                          sincos r6.x, r2.z
                                          rcp r2.z, r6.x
                                          mad r2.y, r2.y, r2.z, c57.x
                                          mul r0.x, r1.y, r2.y  // ::r<0>
                                          mad r2.y, r3.x, -r2.z, c57.x
                                          mad r2.y, r1.x, r2.y, c57.x
                                          mul r0.y, r1.y, r2.y  // ::g<0>
                                        else
                                          if_lt r2.x, c23.w
                                            mad r2.x, r1.z, c49.y, c49.w  // ::h<0>
                                            add r2.y, -r1.x, c57.x
                                            mul r0.x, r1.y, r2.y  // ::r<0>
                                            mad r2.y, r2.x, c16.z, c16.w
                                            frc r2.y, r2.y
                                            mad r2.y, r2.y, c18.z, c18.w
                                            sincos r3.x, r2.y
                                            mul r2.y, r1.x, r3.x
                                            add r2.x, -r2.x, c16.y
                                            mad r2.x, r2.x, c16.z, c16.w
                                            frc r2.x, r2.x
                                            mad r2.x, r2.x, c18.z, c18.w
                                            sincos r6.x, r2.x
                                            rcp r2.x, r6.x
                                            mad r2.y, r2.y, r2.x, c57.x

#line 341
                                            mad r2.x, r3.x, -r2.x, c57.x
                                            mad r2.x, r1.x, r2.x, c57.x
                                            mul r0.yz, r1.y, r2.xyxw  // ::g<0>, ::b<0>
                                          else

#line 345
                                            mad r1.z, r1.z, c64.x, c64.y  // ::h<0>
                                            add r2.x, -r1.x, c57.x
                                            mul r0.y, r1.y, r2.x  // ::g<0>
                                            mad r2.x, r1.z, c16.z, c16.w
                                            frc r2.x, r2.x
                                            mad r2.x, r2.x, c18.z, c18.w
                                            sincos r3.x, r2.x
                                            mul r2.x, r1.x, r3.x
                                            add r1.z, -r1.z, c16.y
                                            mad r1.z, r1.z, c16.z, c16.w
                                            frc r1.z, r1.z
                                            mad r1.z, r1.z, c18.z, c18.w
                                            sincos r6.x, r1.z
                                            rcp r1.z, r6.x
                                            mad r2.x, r2.x, r1.z, c57.x
                                            mul r0.z, r1.y, r2.x  // ::b<0>
                                            mad r1.z, r3.x, -r1.z, c57.x
                                            mad r1.x, r1.x, r1.z, c57.x
                                            mul r0.x, r1.x, r1.y  // ::r<0>
                                          endif
                                        endif

#line 1160
                                      else
                                        if_eq r4.x, -c7.w

#line 981
                                          mad r1.xy, r5.yxzw, c36, c36.zwzw  // ::c<0>, ::l<0>

#line 985
                                          mul r2.xy, r1, c12.w
                                          mul r1.z, r2.x, r2.y
                                          mul r1.z, r5.z, r1.z
                                          cmp r2.xy, r1.z, c37, c37.zwzw
                                          mul r1.z, r1.z, r2.y
                                          frc r1.z, r1.z
                                          mul r2.y, r1.z, r2.x
                                          mad r2.z, r2.x, -r1.z, c11.y  // ::h<0>

#line 992
                                          mad r3.xy, r1, c48.x, c48.y
                                          frc r3.xy, r3
                                          mad r3.xy, r3, c18.z, c18.w

#line 989
                                          sincos r6.y, r3.x
                                          mad r1.x, r1.x, r6.y, -c13.z
                                          sincos r6.x, r3.y
                                          mad r1.y, r1.y, r6.x, -c13.y
                                          mul r1.y, r1.y, c49.x  // ::ToHUV<2>

#line 497
                                          mad r1.x, r1.x, -c64.z, c64.w  // ::minOverMax<0>
                                          if_lt -r1.x, c57.z

#line 502
                                            if_lt -r2.y, c65.x
                                              mul r2.w, r2.z, c20.w  // ::h<0>
                                              rcp r3.x, r1.x
                                              add r3.y, r3.x, c57.y
                                              mad r3.y, r2.w, r3.y, c57.x  // ::part<0>
                                              mul r3.yz, r3.xyxw, r3.xyxw
                                              mul r3.y, r3.y, c22.x
                                              mad r3.y, r3.z, c22.y, r3.y
                                              add r3.y, r3.y, c22.z
                                              rsq r3.y, r3.y
                                              mul r6.z, r1.y, r3.y  // ::b<0>
                                              mul r6.x, r3.x, r6.z  // ::r<0>
                                              mad r3.x, r6.z, r3.x, -r6.z
                                              mad r6.y, r2.w, r3.x, r6.z  // ::g<0>
                                            else
                                              if_lt -r2.y, c65.y

#line 513
                                                mad r2.w, r2.z, -c21.x, c21.y
                                                mul r2.w, r2.w, c61.w  // ::h<0>
                                                rcp r3.x, r1.x
                                                add r3.y, r3.x, c57.y
                                                mad r3.y, r2.w, r3.y, c57.x  // ::part<0>
                                                mul r3.yz, r3.xyxw, r3.xyxw
                                                mul r3.y, r3.y, c22.y
                                                mad r3.y, r3.z, c22.x, r3.y
                                                add r3.y, r3.y, c22.z
                                                rsq r3.y, r3.y
                                                mul r6.z, r1.y, r3.y  // ::b<0>
                                                mul r6.y, r3.x, r6.z  // ::g<0>
                                                mad r3.x, r6.z, r3.x, -r6.z
                                                mad r6.x, r2.w, r3.x, r6.z  // ::r<0>
                                              else
                                                if_lt -r2.y, c65.z
                                                  mad r2.w, r2.z, c21.x, c21.z
                                                  mul r2.w, r2.w, c61.w  // ::h<0>
                                                  rcp r3.x, r1.x
                                                  add r3.y, r3.x, c57.y
                                                  mad r3.y, r2.w, r3.y, c57.x  // ::part<0>

#line 524
                                                  mul r3.yz, r3.xyxw, r3.xyxw
                                                  mul r3.y, r3.y, c22.z
                                                  mad r3.y, r3.z, c22.x, r3.y
                                                  add r3.y, r3.y, c22.y
                                                  rsq r3.y, r3.y
                                                  mul r6.x, r1.y, r3.y  // ::r<0>
                                                  mul r6.y, r3.x, r6.x  // ::g<0>
                                                  mad r3.x, r6.x, r3.x, -r6.x
                                                  mad r6.z, r2.w, r3.x, r6.x  // ::b<0>
                                                else
                                                  if_lt -r2.y, c65.w
                                                    mad r2.w, r2.z, -c21.x, c21.w
                                                    mul r2.w, r2.w, c61.w  // ::h<0>
                                                    rcp r3.x, r1.x
                                                    add r3.y, r3.x, c57.y
                                                    mad r3.y, r2.w, r3.y, c57.x  // ::part<0>
                                                    mul r3.yz, r3.xyxw, r3.xyxw
                                                    mul r3.y, r3.y, c22.x
                                                    mad r3.y, r3.z, c22.z, r3.y
                                                    add r3.y, r3.y, c22.y
                                                    rsq r3.y, r3.y
                                                    mul r6.x, r1.y, r3.y  // ::r<0>
                                                    mul r6.z, r3.x, r6.x  // ::b<0>

#line 535
                                                    mad r3.x, r6.x, r3.x, -r6.x
                                                    mad r6.y, r2.w, r3.x, r6.x  // ::g<0>
                                                  else
                                                    mad r2.w, r2.x, -r1.z, c51.x
                                                    mad r3.x, r2.z, c38.y, c38.z
                                                    mul r3.x, r3.x, c61.w  // ::h<0>
                                                    rcp r1.x, r1.x
                                                    add r3.y, r1.x, c57.y
                                                    mad r3.z, r3.x, r3.y, c57.x  // ::part<0>
                                                    mul r3.w, r1.x, r1.x

#line 551
                                                    mul r4.yw, r3.w, c22.xzzy

#line 542
                                                    mul r3.z, r3.z, r3.z
                                                    mad r3.z, r3.z, c22.y, r4.y
                                                    add r3.z, r3.z, c22.x
                                                    rsq r3.z, r3.z
                                                    mul r7.y, r1.y, r3.z  // ::g<0>
                                                    mul r7.z, r1.x, r7.y  // ::b<0>
                                                    mad r3.z, r7.y, r1.x, -r7.y
                                                    mad r7.x, r3.x, r3.z, r7.y  // ::r<0>

#line 549
                                                    mad r3.x, r2.z, -c38.y, c38.w
                                                    mul r3.x, r3.x, c61.w  // ::h<0>
                                                    mad r3.y, r3.x, r3.y, c57.x  // ::part<0>
                                                    mul r3.y, r3.y, r3.y
                                                    mad r3.y, r3.y, c22.z, r4.w
                                                    add r3.y, r3.y, c22.x
                                                    rsq r3.y, r3.y
                                                    mul r8.y, r1.y, r3.y  // ::g<0>
                                                    mul r8.x, r1.x, r8.y  // ::r<0>
                                                    mad r1.x, r8.y, r1.x, -r8.y
                                                    mad r8.z, r3.x, r1.x, r8.y  // ::b<0>
                                                    cmp r6.xyz, r2.w, r8, r7  // ::r<0>, ::g<0>, ::b<0>
                                                  endif
                                                endif
                                              endif
                                            endif
                                          else

#line 559
                                            if_lt -r2.y, c65.x
                                              mul r1.x, r2.z, c20.w  // ::h<0>
                                              mul r2.w, r1.y, r1.y
                                              mul r3.x, r2.z, r1.x
                                              mad r3.x, r3.x, c50.x, c50.y
                                              rcp r3.x, r3.x
                                              mul r2.w, r2.w, r3.x
                                              rsq r2.w, r2.w
                                              rcp r6.x, r2.w  // ::r<0>
                                              mul r6.y, r1.x, r6.x  // ::g<0>
                                              mov r6.z, c57.z
                                            else
                                              if_lt -r2.y, c65.y
                                                mad r1.x, r2.z, -c21.x, c21.y
                                                mul r2.y, r1.x, c61.w  // ::h<0>

#line 570
                                                mul r2.w, r1.y, r1.y
                                                mul r1.x, r1.x, r2.y
                                                mad r1.x, r1.x, c50.z, c50.w
                                                rcp r1.x, r1.x
                                                mul r1.x, r1.x, r2.w
                                                rsq r1.x, r1.x
                                                rcp r6.y, r1.x  // ::g<0>
                                                mul r6.x, r2.y, r6.y  // ::r<0>
                                                mov r6.z, c57.z
                                              else

#line 593
                                                mad r2.yw, r2.z, c60.x, c60.xyzz
                                                mul r3.xy, r2.ywzw, c61.w  // ::h<0,0>

#line 578
                                                mul r1.x, r1.y, r1.y

#line 594
                                                mul r2.yw, r2, r3.xxzy
                                                mad r2.yw, r2, c53.xxzy, c53.xzzw

#line 578
                                                rcp r1.y, r2.y
                                                mul r1.y, r1.y, r1.x
                                                rsq r1.y, r1.y
                                                rcp r7.y, r1.y  // ::g<0>
                                                mul r7.z, r3.x, r7.y  // ::b<0>

#line 601
                                                mad r2.yz, r2.z, -c38_abs.y, c38_abs.xzww
                                                mul r3.xz, r2.yyzw, c61.w  // ::h<0,0>
                                                mul r2.yz, r2, r3.xxzw
                                                mad r2.yz, r2, c52.xxyw, c52.xzww

#line 586
                                                rcp r1.y, r2.y
                                                mul r1.y, r1.y, r1.x
                                                rsq r1.y, r1.y
                                                rcp r8.z, r1.y  // ::b<0>
                                                mul r8.y, r3.x, r8.z  // ::g<0>

#line 591
                                                mad r9.xyz, r2.x, -r1.z, c51.yzxw

#line 594
                                                rcp r1.y, r2.w
                                                mul r1.y, r1.y, r1.x
                                                rsq r1.y, r1.y
                                                rcp r10.z, r1.y  // ::b<0>
                                                mul r10.x, r3.y, r10.z  // ::r<0>

#line 602
                                                rcp r1.y, r2.z
                                                mul r1.x, r1.y, r1.x
                                                rsq r1.x, r1.x
                                                rcp r1.x, r1.x  // ::r<0>
                                                mul r1.z, r3.z, r1.x  // ::b<0>
                                                mov r1.y, c57.z
                                                mov r10.y, c57.z
                                                cmp r1.xyz, r9.z, r1, r10  // ::r<0>, ::g<0>, ::b<0>
                                                mov r8.x, c57.z
                                                cmp r1.xyz, r9.y, r1, r8  // ::r<0>, ::g<0>, ::b<0>
                                                mov r7.x, c57.z
                                                cmp r6.xyz, r9.x, r1, r7  // ::r<0>, ::g<0>, ::b<0>
                                              endif
                                            endif
                                          endif

#line 609
                                          add r1.xyz, r6, c18.y
                                          frc r2.xyz, r1
                                          add r1.xyz, r1, -r2
                                          mul r1.xyz, r1, c23.y  // Coerce::input<0,0,0>

#line 24
                                          min r2.xyz, r1, c57.x
                                          max r0.xyz, r2, c57.z  // ::Coerce<0,0,0>

#line 1165
                                        else
                                          if_eq r4.x, -c8.x

#line 679
                                            mul r1.xyz, r5.yxyw, c54

#line 735
                                            mad r1.x, r5.x, c51.w, -r1.x
                                            mad r1.x, r5.z, c57.w, r1.x  // FromXYZ::input<2>

#line 679
                                            add r1.y, r1.z, r1.y
                                            mad r1.y, r1.x, c42.w, r1.y  // ::r<0>
                                            mul r2, r5.xyxy, c55
                                            add r2.xy, r2.ywzw, r2.xzzw
                                            mad r1.xz, r1.x, c19.xyyw, r2.xyyw  // ::g<0>, ::b<0>

#line 684
                                            add r2.x, -r1.y, c19.z
                                            pow r2.y, r1.y, c19.w
                                            mad r2.y, r2.y, c20.x, c20.y  // ::r<0>

#line 690
                                            mul r1.y, r1.y, c20.z  // ::r<0>
                                            cmp r1.y, r2.x, r1.y, r2.y  // ::r<0>

#line 700
                                            add r2.xy, -r1.xzzw, c19.z

#line 694
                                            pow r2.z, r1.x, c19.w
                                            mad r2.z, r2.z, c20.x, c20.y  // ::g<0>

#line 706
                                            mul r3.xy, r1.xzzw, c20.z  // ::g<0>, ::b<0>

#line 699
                                            cmp r1.x, r2.x, r3.x, r2.z  // ::g<0>

#line 702
                                            pow r2.x, r1.z, c19.w
                                            mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 707
                                            cmp r1.z, r2.y, r3.y, r1.z  // ::b<0>
                                            mov_sat r2.x, r1.y
                                            cmp r0.x, r1.y, r2.x, c57.z  // ::r<0>
                                            mov_sat r1.y, r1.x
                                            cmp r0.y, r1.x, r1.y, c57.z  // ::g<0>
                                            mov_sat r1.x, r1.z
                                            cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1170
                                          else
                                            if_eq r4.x, -c8.y

#line 679
                                              mul r1.xyz, r5.yxyw, c42

#line 743
                                              mad r1.x, r5.z, c57.w, -r1.x
                                              mad r1.x, r5.x, c17.w, r1.x  // ::z<0>

#line 679
                                              add r1.y, r1.z, r1.y
                                              mad r1.y, r1.x, c42.w, r1.y  // ::r<0>
                                              mul r2, r5.xyxy, c43
                                              add r2.xy, r2.ywzw, r2.xzzw
                                              mad r1.xz, r1.x, c19.xyyw, r2.xyyw  // ::g<0>, ::b<0>

#line 684
                                              add r2.x, -r1.y, c19.z
                                              pow r2.y, r1.y, c19.w
                                              mad r2.y, r2.y, c20.x, c20.y  // ::r<0>

#line 690
                                              mul r1.y, r1.y, c20.z  // ::r<0>
                                              cmp r1.y, r2.x, r1.y, r2.y  // ::r<0>

#line 700
                                              add r2.xy, -r1.xzzw, c19.z

#line 694
                                              pow r2.z, r1.x, c19.w
                                              mad r2.z, r2.z, c20.x, c20.y  // ::g<0>

#line 706
                                              mul r3.xy, r1.xzzw, c20.z  // ::g<0>, ::b<0>

#line 699
                                              cmp r1.x, r2.x, r3.x, r2.z  // ::g<0>

#line 702
                                              pow r2.x, r1.z, c19.w
                                              mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 707
                                              cmp r1.z, r2.y, r3.y, r1.z  // ::b<0>
                                              mov_sat r2.x, r1.y
                                              cmp r0.x, r1.y, r2.x, c57.z  // ::r<0>
                                              mov_sat r1.y, r1.x
                                              cmp r0.y, r1.x, r1.y, c57.z  // ::g<0>
                                              mov_sat r1.x, r1.z
                                              cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1175
                                            else
                                              if_eq r4.x, -c8.z

#line 754
                                                if_eq r1.w, -r4.z
                                                  mov r0.xyz, c57.z  // ::FromxyY<0,1,2>
                                                else
                                                  mul r1.x, r5.z, r5.x
                                                  rcp r1.y, r5.y
                                                  mul r1.x, r1.y, r1.x  // FromXYZ::input<0>
                                                  add r1.z, -r5.x, -r5.y
                                                  add r1.z, r1.z, c57.x
                                                  mul r1.z, r5.z, r1.z
                                                  mul r1.y, r1.y, r1.z  // FromXYZ::input<2>

#line 681
                                                  mul r2.xyz, r5.z, c30
                                                  mad r1.xzw, r1.x, c46.xyyz, r2.xyyz
                                                  mad r1.xyz, r1.y, c59, r1.xzww  // ::r<0>, ::g<0>, ::b<0>

#line 700
                                                  add r2.xyz, -r1, c19.z

#line 686
                                                  pow r2.w, r1.x, c19.w
                                                  mad r1.w, r2.w, c20.x, c20.y  // ::r<0>

#line 706
                                                  mul r3.xyz, r1, c20.z  // ::r<0>, ::g<0>, ::b<0>

#line 691
                                                  cmp r1.x, r2.x, r3.x, r1.w  // ::r<0>

#line 694
                                                  pow r2.x, r1.y, c19.w
                                                  mad r1.y, r2.x, c20.x, c20.y  // ::g<0>

#line 702
                                                  pow r2.x, r1.z, c19.w
                                                  mad r1.z, r2.x, c20.x, c20.y  // ::b<0>

#line 699
                                                  cmp r1.yz, r2, r3, r1  // ::g<0>, ::b<0>

#line 709
                                                  mov_sat r1.w, r1.x
                                                  cmp r0.x, r1.x, r1.w, c57.z  // ::r<0>
                                                  mov_sat r1.x, r1.y
                                                  cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                                                  mov_sat r1.x, r1.z
                                                  cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 754
                                                endif

#line 1180
                                              else
                                                if_eq r4.x, -c8.w

#line 680
                                                  mul r1.xy, r5, c54.wzzw
                                                  add r1.x, r1.y, r1.x
                                                  mad r1.x, r5.z, c42.w, r1.x  // ::r<0>
                                                  mul r1.yzw, r5.xyxy, c66.xxyz
                                                  mad r1.y, r5.x, c46.y, r1.y
                                                  mad r1.y, r5.z, c19.x, r1.y  // ::g<0>
                                                  add r1.z, r1.w, r1.z
                                                  mad r1.z, r5.z, c19.y, r1.z  // ::b<0>

#line 684
                                                  add r1.w, -r1.x, c19.z
                                                  pow r2.x, r1.x, c19.w
                                                  mad r2.x, r2.x, c20.x, c20.y  // ::r<0>

#line 690
                                                  mul r1.x, r1.x, c20.z  // ::r<0>
                                                  cmp r1.x, r1.w, r1.x, r2.x  // ::r<0>
                                                  add r1.w, -r1.y, c19.z
                                                  pow r2.x, r1.y, c19.w
                                                  mad r2.x, r2.x, c20.x, c20.y  // ::g<0>

#line 698
                                                  mul r1.y, r1.y, c20.z  // ::g<0>
                                                  cmp r1.y, r1.w, r1.y, r2.x  // ::g<0>
                                                  add r1.w, -r1.z, c19.z
                                                  pow r2.x, r1.z, c19.w
                                                  mad r2.x, r2.x, c20.x, c20.y  // ::b<0>

#line 706
                                                  mul r1.z, r1.z, c20.z  // ::b<0>
                                                  cmp r1.z, r1.w, r1.z, r2.x  // ::b<0>
                                                  mov_sat r1.w, r1.x
                                                  cmp r0.x, r1.x, r1.w, c57.z  // ::r<0>
                                                  mov_sat r1.x, r1.y
                                                  cmp r0.y, r1.y, r1.x, c57.z  // ::g<0>
                                                  mov_sat r1.x, r1.z
                                                  cmp r0.z, r1.z, r1.x, c57.z  // ::b<0>

#line 1185
                                                else
                                                  mov r0.xyz, c57.z
                                                endif
                                              endif
                                            endif
                                          endif
                                        endif
                                      endif
                                    endif
                                  endif
                                endif
                              endif
                            endif
                          endif
                        endif
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 1629 instruction slots used (1 texture, 1628 arithmetic)
